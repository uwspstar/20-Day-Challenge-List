# hash 哈希
In Python, a hash value is an integer that uniquely identifies a specific set of data. This value is generated by a function known as a hash function. Hash values are used extensively in Python, particularly for comparing key values in dictionaries and for elements in sets.

在 Python 中，哈希值是一个整数，用于唯一标识一组特定的数据。这个值是由一个称为哈希函数的函数生成的。哈希值在 Python 中广泛使用，特别是用于比较字典中的键值和集合中的元素。

### What is a Hash Value? | 什么是哈希值？

#### English
A hash value is the result of a hash function and is used to map data of arbitrary size to data of fixed size. In Python, the hash value is used internally in hash tables for quickly comparing dictionary keys during lookups.

#### 中文
哈希值是哈希函数的结果，用于将任意大小的数据映射到固定大小的数据。在 Python 中，哈希值在哈希表内部使用，用于在查找过程中快速比较字典键。

### Characteristics of Hash Values | 哈希值的特性

1. **Deterministic**: The same input will always produce the same hash value within the same run of a program.
2. **Fast Computation**: Hash functions are designed to be fast and efficient.
3. **Uniform Distribution**: Hash functions should distribute hash values uniformly across the hash table to minimize collisions.
4. **Fixed Size**: Output of a hash function is of fixed size, typically much smaller than the input.

1. **确定性**：在程序的同一次运行中，相同的输入总是产生相同的哈希值。
2. **快速计算**：哈希函数设计得快速且高效。
3. **均匀分布**：哈希函数应该将哈希值在哈希表中均匀分布，以最小化冲突。
4. **固定大小**：哈希函数的输出是固定大小的，通常比输入小得多。

### Using Hash Values in Python | 在 Python 中使用哈希值

#### Example | 示例

```python
# Getting the hash value of an integer
print(hash(42))  # Output: 42

# Getting the hash value of a string
print(hash("hello"))  # Output: -1571999254 (value might vary)

# Using hash values in a dictionary
# Dictionary keys are internally hashed for quick comparison and retrieval
capitals = {
    'France': 'Paris',
    'Italy': 'Rome'
}
print(capitals['France'])  # Fast lookup by hash value
```

### Practical Applications | 实际应用

- **Dictionaries**: Python uses hash values internally to index and retrieve key-value pairs.
- **Sets**: Python sets use hash values to test for membership quickly and to ensure no duplicates are stored.
- **Caching**: Hash values can be used to cache the results of function calls, optimizing performance by storing previously computed results.

- **字典**：Python 内部使用哈希值来索引和检索键值对。
- **集合**：Python 集合使用哈希值来快速测试成员身份并确保不存储重复项。
- **缓存**：可以使用哈希值来缓存函数调用的结果，通过存储先前计算的结果来优化性能。

### Conclusion | 结论

Hash values play a crucial role in the efficiency of data retrieval and storage mechanisms in Python, making operations like lookups in dictionaries and sets extremely fast. Understanding how Python uses hash values helps in writing more efficient and performant code.

哈希值在 Python 中的数据检索和存储机制的效率中起着至关重要的作用，使得在字典和集合中查找等操作非常快。理解 Python 如何使用哈希值有助于编写更高效、性能更好的代码。

In Python, an object is considered "hashable" if it has a hash value that does not change during its lifetime (it needs a `__hash__()` method), and it can be compared to other objects (it needs an `__eq__()` method). Hashability makes an object usable as a dictionary key and a set member because these data structures use the hash value internally.

在 Python 中，如果一个对象在其生命周期内具有不变的哈希值（它需要一个 `__hash__()` 方法），并且可以与其他对象进行比较（它需要一个 `__eq__()` 方法），则该对象被认为是“可哈希的”。可哈希性使对象可以用作字典键和集合成员，因为这些数据结构在内部使用哈希值。

### Hashable Objects | 可哈希对象

#### English
Most of Python’s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries) are not hashable. An immutable object is one that cannot be changed after it is created. This immutability inherently supports consistency of the hash value. Common hashable objects include:
- All of Python's immutable built-in objects, such as:
  - Numeric types: `int`, `float`, `complex`
  - Strings (`str`)
  - Tuples (`tuple`), but note that they are only hashable if their elements are hashable
  - Frozen sets (`frozenset`)

#### 中文
Python 中的大多数不可变内置对象都是可哈希的；可变容器（如列表或字典）不是可哈希的。不可变对象是指创建后无法更改的对象。这种不变性从本质上支持哈希值的一致性。常见的可哈希对象包括：
- Python 的所有不可变内置对象，例如：
  - 数值类型：`int`、`float`、`complex`
  - 字符串 (`str`)
  - 元组 (`tuple`)，但需注意，只有当其元素可哈希时，元组才可哈希
  - 冻结集合 (`frozenset`)

### Example of Hashable and Non-Hashable Objects | 可哈希和不可哈希对象的示例

#### English
Here is a demonstration of using hashable objects as keys in a dictionary:

```python
# A dictionary with hashable keys
my_dict = {
    'name': "John",
    42: "Answer",
    (1, 2, 3): "Coordinates"
}

# Attempting to use a list (a mutable object) as a key results in a TypeError
try:
    my_dict[[1, 2, 3]] = "This will not work"
except TypeError as e:
    print("Error:", e)  # Output: unhashable type: 'list'
```

#### 中文
这里展示了如何在字典中使用可哈希对象作为键：

```python
# 一个带有可哈希键的字典
my_dict = {
    'name': "John",
    42: "答案",
    (1, 2, 3): "坐标"
}

# 尝试使用列表（一个可变对象）作为键会导致 TypeError
try:
    my_dict[[1, 2, 3]] = "这行不通"
except TypeError as e:
    print("错误：", e)  # 输出：不可哈希类型：'list'
```

### Conclusion | 结论

Understanding hashability is crucial when working with hash-based data structures such as dictionaries and sets. Knowing whether an object is hashable helps in designing data structures that rely on fast access and uniqueness enforced by hashing mechanisms.

了解可哈希性在使用基于哈希的数据结构（如字典和集合）时至关重要。知道一个对象是否可哈希有助于设计依赖于快速访问和哈希机制强制唯一性的数据结构。
